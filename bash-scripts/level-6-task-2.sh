#!/bin/bash
#Реализовать `try-catch` аналог в Bash (`trap`, `set -e`).  

#   На примере Java
#   try-catch используется для обработки выпадающих исключений. 

#   try – блок кода, в котором может произойти исключение;
#   catch –  блок кода, в котором происходит обработка исключения;
#   finally – блок кода, который является необязательным, но при его наличии выполняется в любом случае


#   Пример:

#   try {
#       // Код, который может вызвать исключение
#   } catch (ExceptionType1 e1) {
#       // Код для обработки 1 типа исключения
#   } catch (ExceptionType2 e2) {
#       // Код для обработки 2 типа исключения
#   } finally {
#       // Код, который выполняется всегдаы
#   }

#Сначала отключим автоматический выхо при ошибках
set +e

# Функция-обработчик ошибок
error_handler() {
    echo "Ошибка в строке $1, код возврата $2"
}

#Устанавливаем обработчик ошибок. Будем вызывать error_handler() с аргументами текущий строки скрипта 
# и кода возврата в тот момент когда получаем сигнал о !=0 коду возврата (ERR) 
trap 'error_handler $LINENO $?' ERR

#Блок try, основная логика программы
(
    #Устанавливаем прерывание если код возвратат будет != 0
    set -e
    #Здесь будет выполняться код, который может выпасть в исключение (try)
    echo "Выполняю основную логику...."
    #Здесь через false сымитируем ситуацию будто у нас пошло что-то не так и выпадает исключение
    false
)

#Пишем в переменную код возврата
exit_code=$?

#И далее взависимости от того, что вернулось, проверяем код возврата try блока.
#Выпо

if [ $exit_code -ne 0 ]; then
    # Аналог блока catch
    echo "Произошла ошибка, выполняем блок catch..."
fi

#Блок finally, который будет выполнен всегда
echo "Выполнение блока finally"

exit 0